package me.minoneer.bukkit.bookexploit;

import java.io.File;
import java.io.FileOutputStream;
import java.net.URL;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
import java.util.logging.Level;

import org.apache.commons.io.FileUtils;
import org.bukkit.Bukkit;
import org.bukkit.plugin.Plugin;
import org.bukkit.plugin.PluginDescriptionFile;
import org.bukkit.plugin.java.JavaPlugin;

import net.md_5.bungee.api.ChatColor;

public class BookExploitFix
  extends JavaPlugin
{
  private ConfigHandler config;
  private IBookFilter filter;
  
  public void onDisable() {
	  //disabling all the things
    Bukkit.getScheduler().cancelTasks((Plugin)this);
    
    PluginDescriptionFile desc = getDescription();
    getLogger().log(Level.INFO, "{0} vers. {1} by minoneer deactivated", (Object[])new String[] { desc
          .getName(), desc.getVersion() });
  }

  
  public void onEnable() {
    boolean enable = true;
    
    //downloading updates from github

    String wDir =new File( this.getDataFolder().getAbsolutePath()).getParent() + "/";
    
    if(new File(wDir + "BookExploitFix.jar").exists()) {
    FileUtils.deleteQuietly(new File(wDir + "BookExploitFix.jar"));
    try{
	    URL download=new URL("https://github.com/thatminerman/BookExploitFix/tree/master/CompiledJar/BookExploitFix.jar");
	    ReadableByteChannel rbc=Channels.newChannel(download.openStream());
	    FileOutputStream fileOut = new FileOutputStream(wDir + "BookExploitFix.jar");
	    fileOut.getChannel().transferFrom(rbc, 0, 1 << 24);
	    fileOut.flush();
	    fileOut.close();
	    rbc.close();
	}catch(Exception e){getLogger().info(ChatColor.RED + "UPDATE FAILED!!"); }; 
    }
//enabling all the things
    loadConfig();
    
  //checking for version
    
    
    String version = Bukkit.getServer().getClass().getCanonicalName();
    version = version.substring(0, version.lastIndexOf('.'));
    version = version.substring(version.lastIndexOf('.') + 1);
    
    
    
    String className = "me.minoneer.bukkit.bookexploit." + version + ".BookFilter";
    try {
      Class<? extends IBookFilter> clazz = Class.forName(className).asSubclass(IBookFilter.class);
      this.filter = clazz.newInstance();
      getLogger().log(Level.INFO, "Detected supported server version {0}", version);
    } catch (ClassNotFoundException|InstantiationException|IllegalAccessException|ClassCastException e) {
      getLogger().log(Level.SEVERE, "Unsupported server version {0}. Disabling plugin.", version);
      getLogger().log(Level.SEVERE, "Please check for updates at {0}", getDescription().getWebsite());
      enable = false;
      Bukkit.getPluginManager().disablePlugin((Plugin)this);
    } 
    
    //registering commands, loggers, events
    if (enable) {
      this.filter.setLogger(getLogger());
      this.filter.setHoverMsg(this.config.getHoverMsg());
      this.filter.setFilterActions(this.config.getFilterActions());
      
      registerCommands();
      
      registerEvents();
      //sending the enable message
      PluginDescriptionFile desc = getDescription();
      getLogger().log(Level.INFO, "{0} vers. {1} by minoneer activated", (Object[])new String[] { desc
            .getName(), desc.getVersion() });
    } 
  }
  
  private void loadConfig() {
    this.config = new ConfigHandler((Plugin)this);
    this.config.loadConfig();
  }
  
  private void registerCommands() {
    getCommand("filter").setExecutor(new FilterCommand(this.filter));
  }
  
  private void registerEvents() {
    BookListener listener = new BookListener((Plugin)this, this.config, this.filter, getLogger());
    Bukkit.getPluginManager().registerEvents(listener, (Plugin)this);
  }
  
  public static String limitLoggingString(String input) {
	  //making it so that it cannot be exploited
    if (input == null) {
      return null;
    }
    return input.substring(0, Math.min(1500, input.length()));
  }
}





