package me.minoneer.bukkit.bookexploit;

import java.util.logging.Level;
import java.util.logging.Logger;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.player.PlayerEditBookEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.PlayerInventory;
import org.bukkit.plugin.Plugin;






public class BookListener
  implements Listener
{
  private final Plugin plugin;
  private final ConfigHandler config;
  private final IBookFilter bookFilter;
  private final Logger logger;
  
  BookListener(Plugin plugin, ConfigHandler config, IBookFilter bookFilter, Logger logger) {
    this.plugin = plugin;
    this.config = config;
    this.bookFilter = bookFilter;
    this.logger = logger;
  }
  
	@EventHandler(priority = EventPriority.LOW)
	public void onBookEdit(final PlayerEditBookEvent event) {
		//doing the detection
	  if (this.config.isOnCreation()) {
	    Bukkit.getScheduler().runTaskLater(this.plugin, new Runnable()
	        {
	public PlayerEditBookEvent eventY = event;
	           public void run() {
	             PlayerInventory playerInventory = event.getPlayer().getInventory();
	             
	             for (int i = 0; i < playerInventory.getSize(); i++) {
	               ItemStack item = playerInventory.getItem(i);
	               
	               if (item != null && item.getType() == Material.WRITTEN_BOOK) {
	                 if (BookListener.this.config.isDebug()) {
	                   BookListener.this.logger.log(Level.INFO, "Filtering edited ItemStack: {0}", item);
	                 }
	                 ItemStack filtered = BookListener.this.bookFilter.filterBook(item);
	                 
	                 if (filtered != null) {
	                   BookListener.this.logger.log(Level.WARNING, "Player {0} {1} created a book with illegal JSON content!", new Object[] { this.eventY
	                         
	                         .getPlayer().getName(), this.eventY.getPlayer().getUniqueId() });
	                   playerInventory.setItem(i, filtered);
	                 } 
	               } 
	             } 
	           }
	         },4L);
	   }
	 }
	 
	 @EventHandler(priority = EventPriority.LOW)
	 public void onBookRead(PlayerInteractEvent event) {
		 //logging the detection
	   if (!this.config.isOnRead()) {
	     return;
	   }
	   if (event.getAction() != Action.RIGHT_CLICK_AIR && event.getAction() != Action.RIGHT_CLICK_BLOCK) {
	     return;
	   }
	   if (event.getItem() == null || event.getItem().getType() != Material.WRITTEN_BOOK) {
	     return;
	   }
	   if (event.getPlayer().hasPermission("bookfilter.overridefilter")) {
	     return;
	   }
	   
	   if (this.config.isDebug()) {
	     this.logger.log(Level.INFO, "Filtering read ItemStack: {0}", event.getPlayer().getItemInHand());
	   }
	   ItemStack filtered = this.bookFilter.filterBook(event.getPlayer().getItemInHand());
	   
	   if (filtered != null) {
	     this.logger.log(Level.WARNING, "Player {0} {1} just tried to read a book with illegal JSON content!", new Object[] { event
	           
	           .getPlayer().getName(), event.getPlayer().getUniqueId() });
	     event.getPlayer().setItemInHand(filtered);
	     
	     for (String line : this.config.getChatWarning())
	       event.getPlayer().sendMessage(line); 
	   } 
	 }
	
}




